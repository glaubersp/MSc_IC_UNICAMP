This file was created with JabRef 2.3b.
Encoding: ISO8859_1

@INCOLLECTION{MossakowskiEtAl07b,
  author = {Till Mossakowski and Christian Maeder and Klaus L{\"u}ttich},
  title = {The {H}eterogeneous {T}ool {S}et},
  booktitle = {VERIFY 2007},
  year = {2007},
  editor = {Bernhard Beckert},
  crossref = {MossakowskiEA06},
  status = {Reviewed}
}

@MISC{Aspinall2002,
  author = {Aspinall, D. and Sannella, D.},
  title = {{F}rom {S}pecifications {T}o {C}ode {I}n {CASL}},
  year = {2002},
  abstract = {The status of the Common Framework Initiative (CoFI) and the Common
	Algebraic Specification Language (Casl) are briefly presented.},
  citeulike-article-id = {1206687},
  keywords = {no-tag},
  priority = {3},
  url = {\url{http://citeseer.ist.psu.edu/aspinall02from.html}}
}

@ARTICLE{Astesiano2002,
  author = {Astesiano, Egidio and Bidoit, Michel and Kirchner, Hélène and Br\"uckner,
	Bernd K. and Mosses, Peter D. and Sannella, Donald and Tarlecki,
	Andrzej },
  title = {{CASL}: {T}he {C}ommon {A}lgebraic {S}pecification {L}anguage},
  journal = {Theoretical Computer Science},
  year = {2002},
  abstract = {Casl is an expressive language for the formal specification of functional
	requirements and modular design of software. It has been designed
	by CoFI, the international Common Framework Initiative for algebraic
	specification and development. It is based on a critical selection
	of features that have already been explored in various contexts,
	including subsorts, partial functions, first-order logic, and structured
	and architectural specifications. Casl should facilitate interoperability
	of many...},
  citeulike-article-id = {1206690},
  keywords = {no-tag},
  owner = {glauber},
  priority = {2},
  timestamp = {2007.04.06},
  url = {http://citeseer.ist.psu.edu/astesiano01casl.html}
}

@INCOLLECTION{Barendregt1992a,
  author = {Barendregt, Henk P.},
  title = {Lambda Calculi With Types},
  booktitle = {Handbook Of Logic In Computer Science, Volumes 1 (Background: Mathematical
	Structures) And 2 (Background: Computational Structures)},
  publisher = {Clarendon},
  year = {1992},
  editor = {Maibaum, Abramsky \& Gabbay \&},
  volume = {2},
  address = {Arlington, VA, USA},
  owner = {glauber},
  timestamp = {2007.08.04},
  url = {http://citeseer.ist.psu.edu/barendregt92lambda.html},
  urlaccessdate = {14 nov. 2006}
}

@INPROCEEDINGS{Barendregt1988,
  author = {H. P. Barendregt},
  title = {{I}ntroduction to {L}ambda {C}alculus},
  booktitle = {Aspen{\ae}s Workshop on Implementation of Functional Languages, G{\"o}teborg},
  year = {1988},
  publisher = {Programming Methodology Group, University of G{\"o}teborg and Chalmers
	University of Technology},
  url = {citeseer.ist.psu.edu/barendregt94introduction.html}
}

@MISC{Barendregt1988a,
  author = {Barendregt, Henk P.},
  title = {Introduction To Lambda Calculus},
  year = {1988},
  booktitle = {Aspen\aes Workshop On Implementation Of Functional Languages, G\"uteborg},
  owner = {glauber},
  publisher = {Programming Methodology Group, University Of G\"uteborg And Chalmers
	University Of Technology},
  timestamp = {2007.08.04},
  url = {http://citeseer.ist.psu.edu/barendregt94introduction.html},
  urlaccessdate = {14 nov. 2006}
}

@INPROCEEDINGS{Berghofer1999,
  author = {Berghofer, Stefan and Wenzel, Markus },
  title = {{I}nductive {D}atatypes in {HOL} - {L}essons {L}earned in {F}ormal-{L}ogic
	{E}ngineering},
  booktitle = {Theorem Proving in Higher Order Logics},
  year = {1999},
  pages = {19--36},
  abstract = {. Isabelle/HOL has recently acquired new versions of definitional
	packages for inductive datatypes and primitive recursive functions.
	In contrast to its predecessors and most other implementations, Isabelle/HOL
	datatypes may be mutually and indirect recursive, even infinitely
	branching. We also support inverted datatype definitions for characterizing
	existing types as being inductive ones later. All our constructions
	are fully definitional according to established HOL tradition. Stepping
	back...},
  citeulike-article-id = {1206719},
  keywords = {no-tag},
  owner = {glauber},
  priority = {3},
  timestamp = {2007.04.06},
  url = {http://citeseer.ist.psu.edu/280111.html}
}

@INPROCEEDINGS{Bidoit1999,
  author = {Bidoit, Michel and Sannella, Don and Tarlecki, Andrzej },
  title = {{A}rchitectural {S}pecifications in {CASL}},
  booktitle = {Proc.\ 7th Int.\ Conf.\ Algebraic Methodology and Software Technology
	(AMAST'98), Amazonia, Brazil, Jan.\ 1999},
  year = {1999},
  volume = {1548},
  pages = {341--357},
  publisher = {Springer},
  abstract = {One of the most novel features of Casl, the Common Algebraic Specification
	Language, is the provision of so-called architectural specifications
	for describing the modular structure of software systems. A brief
	discussion of refinement of Casl specifications provides the setting
	for a presentation of the rationale behind architectural specifications.
	This is followed by some details of the features provided in Casl
	for architectural specifications, hints concerning their semantics,
	and simple...},
  citeulike-article-id = {1206700},
  keywords = {no-tag},
  owner = {glauber},
  priority = {3},
  timestamp = {2007.04.06},
  url = {http://citeseer.ist.psu.edu/501891.html}
}

@ARTICLE{Bortin2006,
  author = {Bortin, Maksym and Johnsen, Einar B. and L\&\#252;th, Christoph },
  title = {{S}tructured formal development in {I}sabelle},
  journal = {Nordic J. of Computing},
  year = {2006},
  volume = {13},
  pages = {2--21},
  number = {1},
  month = {June},
  address = {, Finland},
  citeulike-article-id = {1014748},
  issn = {1236-6064},
  keywords = {no-tag},
  owner = {glauber},
  priority = {3},
  publisher = {Publishing Association Nordic Journal of Computing},
  timestamp = {2007.04.06},
  url = {http://portal.acm.org/citation.cfm?id=1161595}
}

@INPROCEEDINGS{Borzyszkowski1999,
  author = {Borzyszkowski, Tomasz },
  title = {{H}igher-{O}rder {L}ogic and {T}heorem {P}roving for {S}tructured
	{S}pecifications},
  booktitle = {Workshop on Algebraic Development Techniques},
  year = {1999},
  pages = {401--418},
  abstract = {In this paper we present the higher-order logic used in theorem-provers
	like the HOL system (see [GM 93]) or Isabelle HOL logic (see [Paul
	94]) as an institution. Then we show that for maps of institutions
	into HOL that satisfy certain technical conditions we can reuse the
	proof system of the higher-order logic to reason about structured
	specifications built over the institutions mapped into HOL. We also
	show some maps of institutions underlying the CASL specification
	formalism (see [CASL 99])...},
  citeulike-article-id = {1206718},
  keywords = {no-tag},
  owner = {glauber},
  priority = {3},
  timestamp = {2007.04.06},
  url = {http://citeseer.ist.psu.edu/465001.html}
}

@MISC{IsabelleSite,
  author = {Isabelle Comunity},
  title = {Isabelle Overview},
  year = {2007},
  owner = {glauber},
  timestamp = {2007.08.29},
  url = {http://isabelle.in.tum.de/overview.html}
}

@UNPUBLISHED{Daum'e2002a,
  author = {Daum{\'e} III, Hal},
  title = {Yet Another Haskell Tutorial},
  year = {2002},
  owner = {glauber},
  pages = {220},
  timestamp = {2007.08.04},
  url = {http://pub.hal3.name/daume02yaht.pdf},
  urlaccessdate = {14 nov. 2006}
}

@MISC{Gagnon2006,
  author = {Gagnon, Etienne M.},
  title = {{SableCC} {P}arser {G}enerator},
  year = {2006},
  url = {\url{http://www.sablecc.org}},
  urlaccessdate = {14 nov. 2006}
}

@MISC{Gagnon2006a,
  author = {Gagnon, Etienne M.},
  title = {SableCC Parser Generator},
  year = {2006},
  owner = {glauber},
  timestamp = {2007.08.04},
  url = {http://www.sablecc.org},
  urlaccessdate = {14 nov. 2006}
}

@BOOK{Gamma1995,
  title = {{D}esign {P}atterns: {E}lements {O}f {R}eusable {O}bject-{O}riented
	{S}oftware},
  publisher = {Addison-Wesley Professional},
  year = {1995},
  author = {Gamma, Erich and Helm, Richard and Johnson, Ralph and Vlissides,
	John},
  pages = {395},
  edition = {1st},
  booktitle = {Design Patterns: Elements Of Reusable Object-Oriented Software},
  isbn = {0-201-63361-2}
}

@PROCEEDINGS{Gaudel1994,
  title = {{F}ormal {S}pecification {T}echniques ({E}xtended {A}bstract)},
  year = {1994},
  address = {USA},
  publisher = {IEEE Computer Society Press},
  author = {Gaudel, Marie C.},
  journal = {ICSE '94: Proceedings Of The 16th International Conference On Software
	Engineering},
  location = {Los Alamitos, USA},
  pages = {223 - 227}
}

@MISC{ghc,
  author = {The {GHC Team}},
  title = {The Glasgow Haskell Compiler},
  year = {2007},
  owner = {glauber},
  timestamp = {2007.08.04},
  url = {http://haskell.org/ghc/}
}

@MISC{learnHaskell,
  author = {The {Haskell Team}},
  title = {Learning Haskell},
  year = {2007},
  owner = {glauber},
  timestamp = {2007.08.04},
  url = {http://www.haskell.org/haskellwiki/Learning\_Haskell}
}

@MISC{Hill,
  author = {Hill, Jonathan M. D. and Clarke, Keith},
  title = {{A}n {I}ntroduction {T}o {C}ategory {T}heory, {C}ategory {T}heory
	{M}onads, {A}nd {T}heir {R}elationship {T}o {F}unctional {P}rogramming},
  abstract = {Incorporating imperative features into a purely functional language
	has become an active area of research within the functional programming
	community [10, 7, 12]. One of the techniques gaining widespread acceptance
	as a model for imperative functional programming is monads [13, 9].
	The purpose of this technical report is to give a category theoretic
	introduction to monads, and to explore the relationship to what functional
	programmers term a monad. Keywords: Monads; Category theory; Kleisli...},
  citeulike-article-id = {1190619},
  keywords = {no-tag},
  priority = {2},
  url = {\url{http://citeseer.ist.psu.edu/62964.html}}
}

@BOOK{Loeckx1996,
  title = {{S}pecification of {A}bstract {D}ata {T}ypes},
  publisher = {John Wiley \& Sons, Inc.},
  year = {1996},
  author = {Loeckx, Jacques and Ehrich, Hans-Dieter and Wolf, Markus},
  series = {Wiley/Teubner Computing Series},
  address = {New York, NY, USA},
  isbn = {0-471-95067-X}
}

@BOOK{McCluskey1994,
  title = {{T}he {C}onstruction of {F}ormal {S}pecifications: an {I}ntroduction
	to the {M}odel-{B}ased and {A}lgebraic {A}pproaches},
  publisher = {Mcgraw Hill Book Co Ltd},
  year = {1994},
  author = {McCluskey, T. L. and Turner, J. L.},
  series = {McGraw Hill Software Engineering Series},
  address = {Columbus, OH, USA},
  isbn = {0-07-707735-0}
}

@INCOLLECTION{Mossakowskia,
  author = {Mossakowski, Till },
  title = {{R}elating {CASL} with {O}ther {S}pecification {L}anguages: the {I}nstitution
	{L}evel},
  booktitle = {Theoretical Computer Science},
  abstract = {In this work, we investigate various specification languages and their
	relation to Casl, the recently developed Common Algebraic Specification
	Language. In particular, we consider the languages Larch, OBJ3, CafeOBJ,
	ACT ONE, ASF, and HEP-theories, as well as various sublanguages of
	Casl that more or less directly correspond to these. All these languages
	are translated to an appropriate sublanguage of Casl. The translation
	mainly concerns the level of specification in-the-small: the logics...},
  citeulike-article-id = {1206702},
  keywords = {no-tag},
  owner = {glauber},
  priority = {3},
  timestamp = {2007.04.06},
  url = {http://citeseer.ist.psu.edu/mossakowski00relating.html}
}

@INPROCEEDINGS{Mossakowski2000,
  author = {Mossakowski, Till },
  title = {{CASL}: {F}rom {S}emantics to {T}ools},
  booktitle = {Tools and Algorithms for Construction and Analysis of Systems},
  year = {2000},
  pages = {93--108},
  abstract = {CASL, the common algebraic specification language, has been developed
	as a language that subsumes many previous algebraic specification
	frameworks and also provides tool interoperability. CASL is a complex
	language with a complete formal semantics. It is therefore a challenge
	to build good tools for CASL. In this work, we present and discuss
	the Bremen HOL-CASL system, which provides parsing, static checking,
	conversion to LaTeX and theorem proving for CASL specifications.
	To make tool...},
  citeulike-article-id = {1206705},
  keywords = {no-tag},
  owner = {glauber},
  priority = {3},
  timestamp = {2007.04.06},
  url = {http://citeseer.ist.psu.edu/250245.html}
}

@BOOKLET{Mossakowski2006,
  title = {Development graphs - Proof management for structured specifications},
  author = {Till Mossakowski and Serge Autexier and Dieter Hutter},
  year = {2006},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  ee = {http://dx.doi.org/10.1016/j.jlap.2005.09.005},
  journal = {J. Log. Algebr. Program.},
  number = {1-2},
  pages = {114-145},
  volume = {67}
}

@MISC{Mossakowski,
  author = {Mossakowski, Till and Haxthausen, Anne and Sanella, Donald and Tarlecki,
	A.},
  title = {{CASL} - {T}he {C}ommon {A}lgebraic {S}pecification {L}anguage: {S}emantics
	{A}nd {P}roof {T}heory},
  abstract = {Casl is an expressive speci cation language that has been designed
	to supersede many existing algebraic speci cation languages and provide
	a standard. Casl consists of several layers, including basic (unstructured)
	speci cations, structured speci cations and architectural speci cations
	(the latter are used to prescribe the structure of implementations).},
  citeulike-article-id = {1206701},
  keywords = {no-tag},
  priority = {3},
  url = {\url{http://citeseer.ist.psu.edu/mossakowski03casl.html}}
}

@INPROCEEDINGS{Mossakowski1997,
  author = {Mossakowski, Till and Kolyang and Bruckner, Bernd K. },
  title = {{S}tatic semantic analysis and theorem proving for {CASL}},
  booktitle = {Workshop on Algebraic Development Techniques},
  year = {1997},
  pages = {333--348},
  abstract = {. This paper presents a static semantic analysis for CASL, the Common
	Algebraic Specification Language. Abstract syntax trees are generated
	including subsorts and overloaded functions and predicates. The static
	semantic analysis, through the implementation of an overload resolution
	algorithm, checks and qualifies these abstract syntax trees. The
	result is a fully qualified CASL abstract syntax tree where the overloading
	has been resolved. This abstract syntax tree corresponds to a theory
	in the ...},
  citeulike-article-id = {1206717},
  keywords = {no-tag},
  owner = {glauber},
  priority = {3},
  timestamp = {2007.04.06},
  url = {http://citeseer.ist.psu.edu/mossakowski98static.html}
}

@INPROCEEDINGS{MossakowskiEA06,
  author = {Till Mossakowski and Christian Maeder and Klaus L{\"u}ttich},
  title = {The {H}eterogeneous {T}ool {S}et},
  booktitle = {TACAS 2007},
  year = {2007},
  editor = {Orna Grumberg and Michael Huth},
  volume = {4424},
  series = {Lecture Notes in Computer Science},
  pages = {519-522},
  publisher = {Springer-Verlag Heidelberg},
  abstract = {Heterogeneous specification becomes more and more important because
	complex systems are often specified using multiple viewpoints, involving
	multiple formalisms. Moreover, a formal software development process
	may lead to a change of formalism during the development. However,
	current research in integrated formal methods only deals with ad-hoc
	integrations of different formalisms.
	
	The heterogeneous tool set (Hets) is a parsing, static analysis and
	proof management tool combining various such tools for individual
	specification languages, thus providing a tool for heterogeneous
	multi-logic specification. Hets is based on a graph of logics and
	languages (formalized as so-called institutions), their tools, and
	their translations. This provides a clean semantics of heterogeneous
	specification, as well as a corresponding proof calculus. For proof
	management, the calculus of development graphs (known from other
	large-scale proof management systems) has been adapted to heterogeneous
	specification. Development graphs provide an overview of the (heterogeneous)
	specification module hierarchy and the current proof state, and thus
	may be used for monitoring the overall correctness of a heterogeneous
	development.},
  keywords = {proof heterogeneity logic institution prover theorem integration development
	graph},
  pdfurl = {http://www.informatik.uni-bremen.de/~till/papers/hets-tacas-toolpaper.pdf},
  psurl = {http://www.informatik.uni-bremen.de/~till/papers/hets-tacas-toolpaper.ps},
  status = {Reviewed}
}

@MISC{Nipkow,
  author = {Nipkow, Tobias and Paulson, Lawrence},
  title = {{I}sabelle {HOL} - {T}he {T}utorial},
  citeulike-article-id = {1206712},
  keywords = {no-tag},
  priority = {3},
  url = {\url{http://citeseer.ist.psu.edu/481559.html}}
}

@BOOK{Nipkow-Paulson-Wenzel:2002,
  title = {{I}sabelle/{HOL} --- A Proof Assistant for Higher-Order Logic},
  publisher = {Springer},
  year = {2002},
  author = {Tobias Nipkow and Lawrence C. Paulson and Markus Wenzel},
  volume = {2283},
  series = {LNCS}
}

@INPROCEEDINGS{Paulson1990,
  author = {Paulson, Lawrence C.},
  title = {{I}sabelle: {T}he next seven hundred theorem provers},
  booktitle = {Proceedings of the Tenth International Conference on Automated Deduction
	(Kaiserslautern, West Germany)},
  year = {1990},
  editor = {Stickel, M. },
  volume = {449},
  pages = {7??--7??},
  address = {Berlin},
  abstract = {This manual describes how to use the theorem prover Isabelle. For
	
	beginners, it explains how to perform simple single-step proofs in
	the built-in logics. These include first-order logic, a classical
	sequent calculus, zf set theory, Constructive Type Theory, and higher-order
	logic. Each of these logics is described. The manual then explains
	how to develop advanced tactics and tacticals and how to derive rules.
	Finally, it describes how to define new logics within Isabelle.},
  citeulike-article-id = {1206710},
  keywords = {no-tag},
  owner = {glauber},
  priority = {3},
  timestamp = {2007.04.06},
  url = {http://citeseer.ist.psu.edu/paulson90isabelle.html}
}

@MISC{Paulson,
  author = {Paulson, Lawrence C. },
  title = {{A} {F}ormulation of the {S}imple {T}heory of {T}ypes (for {I}sabelle)},
  abstract = {Simple type theory is formulated for use with the generic theorem
	prover
	
	Isabelle. This requires explicit type inference rules. There are function,
	product,
	
	and subset types, which may be empty. Descriptions (the #-operator)
	
	introduce the Axiom of Choice. Higher-order logic is obtained through
	reflection
	
	between formulae and terms of type bool . Recursive types and functions
	
	can be formally constructed.},
  citeulike-article-id = {1206713},
  keywords = {no-tag},
  owner = {glauber},
  priority = {3},
  timestamp = {2007.04.06},
  url = {http://citeseer.ist.psu.edu/paulson89formulation.html}
}

@TECHREPORT{Paulson1993,
  author = {Paulson, Lawrence C. },
  title = {{T}he {I}sabelle {R}eference {M}anual},
  year = {1993},
  number = {283},
  abstract = {syntax trees . . . . . . . . . . . . . . . . . . . . . . . . . 81
	8.2 Transforming parse trees to asts . . . . . . . . . . . . . .
	. . . . 82 8.3 Transforming asts to terms . . . . . . . . . . . .
	. . . . . . . . . 84 8.4 Printing of terms . . . . . . . . . . .
	. . . . . . . . . . . . . . . . 84 8.5 Macros: syntactic rewriting
	. . . . . . . . . . . . . . . . . . . . . 86 8.5.1 Specifying macros
	. . . . . . . . . . . . . . . . . . . . . . . 87 8.5.2 Applying rules
	. . . . . . . . . . . . . . . . ...},
  citeulike-article-id = {1206711},
  keywords = {no-tag},
  owner = {glauber},
  priority = {3},
  timestamp = {2007.04.06},
  url = {http://citeseer.ist.psu.edu/paulson95isabelle.html}
}

@INPROCEEDINGS{Regensburger1995,
  author = {Regensburger, Franz },
  title = {{HOLCF}: {Higher} {Order} {Logic} of {Computable} {Functions}},
  booktitle = {Proceedings of the 8th International Workshop on Higher Order Logic
	Theorem Proving and Its Applications},
  year = {1995},
  editor = {Schubert, E. T. and Windley, P. J. and Foss, Alves J. },
  address = {Aspen Grove, Utah},
  publisher = {Springer-Verlag LNCS 971},
  abstract = {. This paper presents a survey of HOLCF, a higher order logic
	
	of computable functions. The logic HOLCF is based on HOLC, a variant
	
	of the well known higher order logic HOL, which offers the additional
	
	concept of type classes.
	
	HOLCF extends HOLC with concepts of domain theory such as complete
	
	partial orders, continuous functions and a fixed point operator. With
	the
	
	help of type classes the extension can be formulated in a way such
	that
	
	the logic LCF constitutes a proper sublanguage of...},
  citeulike-article-id = {1206720},
  keywords = {no-tag},
  owner = {glauber},
  priority = {3},
  timestamp = {2007.04.06},
  url = {http://citeseer.ist.psu.edu/314052.html}
}

@MISC{Roggenbach1999,
  author = {Roggenbach, M. and Mossakowski, T.},
  title = {{B}asic {D}atatypes {I}n {C}asl},
  year = {1999},
  abstract = {The CoFI-workshop in Cachan, November 1998, stated: {"}There should
	be (a) standard predefined library/ies for numbers, characters, strings
	(possibly more). For pragmatic usability of Casl, there also needs
	to be a special syntax for literals, similar to programming languages.{"}[Kol98]
	This note is a proposal for such a standard library.},
  citeulike-article-id = {1206699},
  keywords = {no-tag},
  priority = {3},
  url = {\url{http://citeseer.ist.psu.edu/roggenbach00basic.html}}
}

@ARTICLE{Sannella2001,
  author = {Sannella, Donald },
  title = {{T}he {C}ommon {F}ramework {I}nitiative for {A}lgebraic {S}pecification
	and {D}evelopment of {S}oftware: {R}ecent {P}rogress},
  journal = {Lecture Notes in Computer Science},
  year = {2001},
  volume = {2267},
  pages = {328--??},
  abstract = {. The Common Framework Initiative (CoFI) is an open international
	collaboration which aims to provide a common framework for algebraic
	specification and development of software. The central element of
	the Common Framework is a specification language called Casl for
	formal specification of functional requirements and modular software
	design which subsumes many previous algebraic specification languages.
	This paper is a brief summary of past and present work on CoFI.},
  citeulike-article-id = {1206688},
  keywords = {no-tag},
  owner = {glauber},
  priority = {3},
  timestamp = {2007.04.06},
  url = {http://citeseer.ist.psu.edu/211762.html}
}

@MISC{Sannella1999,
  author = {Sannella, Donald},
  title = {{S}pecification {L}anguages},
  year = {1999},
  url = {\url{http://homepages.inf.ed.ac.uk/dts/pub/spec-lang.pdf}},
  urlaccessdate = {14 nov. 2006}
}

@MISC{Sannella1999a,
  author = {Sannella, Donald},
  title = {Specification Languages},
  year = {1999},
  owner = {glauber},
  timestamp = {2007.08.04},
  url = {http://homepages.inf.ed.ac.uk/dts/pub/spec-lang.pdf},
  urlaccessdate = {14 nov. 2006}
}

@UNPUBLISHED{Sannella2006,
  author = {Sannella, Donald and Tarlecki, Andrzej},
  title = {{F}oundations of {A}lgebraic {S}pecification and {F}ormal {P}rogram
	{D}evelopment},
  note = {A ser publicado},
  year = {2006},
  address = {Cambridge, UK},
  booktitle = {Foundations Of Algebraic Specificatios And Formal Program Development},
  publisher = {Cambridge University Press}
}

@MISC{Schroder,
  author = {Schr\"oder, Lutz and Mossakowski, Till},
  title = {{HasCASL}: {T}owards {I}ntegrated {S}pecification {A}nd {D}evelopment
	{O}f {H}askell {P}rograms},
  abstract = {The specification of programs in modern functional languages such
	as Haskell requires a specification language that supports the type
	system of these languages, in particular higher order types, type
	constructors, and parametric polymorphism. We lay out the design
	of HasCasl, a higher order extension of the algebraic specification
	language Casl that is geared towards precisely this purpose. Its
	semantics is tuned to allow program development by specification
	refinement, while at the same time...},
  citeulike-article-id = {1206704},
  keywords = {no-tag},
  priority = {3},
  url = {\url{http://citeseer.ist.psu.edu/459463.html}}
}

@UNPUBLISHED{Schroder2006,
  author = {Lutz Schr{\"o}der},
  title = {Higher order and reactive algebraic specification and development},
  month = {Feb},
  year = {2006},
  owner = {glauber},
  timestamp = {2007.08.13},
  url = {http://www.informatik.uni-bremen.de/~lschrode/papers/Summary.ps}
}

@MISC{SchröderEtAl03,
  author = {Lutz Schr{\"o}der and Till Mossakowski and Christian Maeder},
  title = {HasCASL - Integrated functional specification and programming. Language
	summary.},
  year = {2003},
  abstract = {The development of programs in modern functional languages such as
	Haskell calls for a wide-spectrum specification formalism that supports
	the type system of such languages, in particular higher order types,
	type constructors, and polymorphism, and that contains a functional
	language as an executable subset in order to facilitate rapid prototyping.
	We lay out the design of HasCASL, a higher order extension of CASL
	that is geared towards precisely this purpose. Its semantics is tuned
	to allow program development by specification refinement, while at
	the same time staying close to the set-theoretic semantics of first
	order CASL. The number of primitive concepts in the logic has been
	kept as small as possible; advanced concepts, in particular general
	recursion, can be formulated within the language itself. This document
	provides a detailed definition of the HasCASL syntax and an informal
	description of the semantics, building on the existing CASL Summary.},
  pdfurl = {http://www.informatik.uni-bremen.de/agbkb/forschung/formal_methods/CoFI/HasCASL/hascasl_summary.pdf},
  psurl = {http://www.informatik.uni-bremen.de/agbkb/forschung/formal_methods/CoFI/HasCASL/hascasl_summary.ps},
  status = {Other}
}

@MISC{CafeOBJ,
  author = {The CafeOBJ Team},
  title = {{CafeOBJ} {O}fficial {H}omepage},
  year = {1995},
  url = {\url{http://www.ldl.jaist.ac.jp/cafeobj}},
  urlaccessdate = {14 nov. 2006}
}

@BOOK{Thompson1999,
  title = {{H}askell: {T}he {C}raft {O}f {F}unctional {P}rogramming},
  publisher = {Addison Wesley},
  year = {1999},
  author = {Thompson, Simon},
  pages = {512},
  address = {Boston, USA},
  edition = {2},
  isbn = {0-201-34275-8}
}

@MISC{MossakowskiWeb,
  author = {Till Mossakowski, Christian Maeder, Klaus Lüttich and Stefan Wölfl},
  title = {The {H}eterogeneous {T}ool {S}et},
  owner = {glauber},
  timestamp = {2007.08.30},
  url = {http://www.informatik.uni-bremen.de/~till/papers/hets-paper.pdf}
}

@ARTICLE{Tucker2002,
  author = {Tucker, J. V. and Zucker, J. I.},
  title = {{A}bstract {C}omputability {A}nd {A}lgebraic {S}pecification},
  journal = {ACM Trans. Comput. Logic},
  year = {2002},
  volume = {3},
  pages = {279 - 333},
  number = {2},
  address = {New York, NY, USA},
  issn = {1529 - 3785},
  publisher = {ACM Press}
}

@MISC{Von2000,
  author = {Von Lamsweerde, Axel},
  title = {{F}ormal {S}pecification: {A} {R}oadmap},
  year = {2000},
  booktitle = {ICSE - Future Of SE Track},
  pages = {147-159},
  url = {\url{http://citeseer.ist.psu.edu/vanlamsweerde00formal.html}},
  urlaccessdate = {14 nov. 2006}
}

@MISC{Von2000a,
  author = {Von Lamsweerde, Axel},
  title = {Formal Specification: A Roadmap},
  year = {2000},
  booktitle = {ICSE - Future Of SE Track},
  owner = {glauber},
  pages = {147-159},
  timestamp = {2007.08.04},
  url = {http://citeseer.ist.psu.edu/vanlamsweerde00formal.html},
  urlaccessdate = {14 nov. 2006}
}

@INPROCEEDINGS{WBH+02,
  author = {Chr.~Weidenbach and U.~Brahm and Th.~Hillenbrand and E.~Keen and
	Chr.~Theobald and D.~Topi\'{c}},
  title = {{SPASS} Version 2.0},
  booktitle = {Proceedings of the 18th International Conference on Automated Deduction},
  year = {2002},
  editor = {A.~Voronkov},
  volume = {2392},
  series = {LNAI},
  pages = {275--279},
  publisher = {Springer-Verlag},
  owner = {glauber},
  timestamp = {2007.08.22}
}

