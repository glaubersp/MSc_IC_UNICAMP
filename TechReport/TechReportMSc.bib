% This file was created with JabRef 2.4.2.
% Encoding: UTF8

@ARTICLE{Astesiano2002,
  author = {Astesiano, Egidio and Bidoit, Michel and Kirchner, Hélène and Br\"uckner,
	Bernd K. and Mosses, Peter D. and Sannella, Donald and Tarlecki,
	Andrzej},
  title = {{CASL}: {T}he {C}ommon {A}lgebraic {S}pecification {L}anguage},
  journal = {Theoretical Computer Science},
  year = {2002},
  abstract = {Casl is an expressive language for the formal speciﬁcation of functional
	requirements and modular design of software. It has been designed
	by CoFI, the international Common Framework Initiative for algebraic
	speciﬁcation and development. It is based on a critical selection
	of features that have already been explored in various contexts,
	including subsorts, partial functions, ﬁrst-order logic, and structured
	and architectural speciﬁcations. Casl should facilitate interoperability
	of many existing algebraic prototyping and veriﬁcation tools. This
	paper gives an overview of the Casl design. The ma jor issues that
	had to be resolved in the design process are indicated, and all the
	main concepts and constructs of Casl are brieﬂy explained and illustrated—the
	reader is referred to the Casl Language Summary for further details.
	Some familiarity with the fundamental concepts of algebraic speciﬁcation
	would be advantageous.},
  citeulike-article-id = {1206690},
  owner = {glauber},
  timestamp = {2009.01.11},
  url = {http://citeseer.ist.psu.edu/astesiano01casl.html}
}

@TECHREPORT{Spectrum,
  author = {M. Broy and C. Facchi and R. Grosu and R. Hettler and H. Hussmann
	and D. Nazareth and F. Regensburger and O. Slotosch and K. St{\o}len},
  title = {The {R}equirement and {D}esign {S}pecification {L}anguage {{\sc {S}pectrum}}.
	{A}n {I}nformal {I}ntroduction. {V}ersion 1.0. {P}art {I}},
  institution = {Technische Universit{\"a}t M{\"u}nchen. Institut f{\"u}r Informatik},
  year = {1993},
  number = {TUM-I9311},
  month = {May},
  owner = {glauber},
  timestamp = {2009.01.16},
  url = {http://www4.informatik.tu-muenchen.de/proj/korso/papers/v10.html}
}

@INPROCEEDINGS{MaudeLib,
  author = {Manuel Clavel and Francisco Durán and Steven Eker and Patrick Lincoln
	and Narciso Martí-Oliet and José Meseguer and Carolyn Talcott},
  title = {Predefined Data Modules},
  booktitle = {All About Maude - A High-Performance Logical Framework},
  year = {2007},
  editor = {Manuel Clavel and Francisco Durán and Steven Eker and Patrick Lincoln
	and Narciso Martí-Oliet and José Meseguer and Carolyn Talcott},
  volume = {4350},
  series = {Lecture Notes in Computer Science},
  pages = {231-305},
  month = {July},
  publisher = {Springer; Berlin; http://www.springer.de},
  abstract = {Maude has a standard library of predefined modules that, by default,
	are entered into the system at the beginning of each session, so
	that any of these predefined modules can be imported by any other
	module defined by the user. Also, by default, the predefined functional
	module BOOL is automatically imported (in including mode) as a submodule
	of any user-defined module, unless such importation is explicitly
	disabled. These modules can be found in the file prelude.maude that
	is part of the Maude distribution.
	
	We describe below those predefined modules that provide commonly used
	data types, including Booleans, numbers, strings, and quoted identifiers.
	The relationships among these modules are shown in the importation
	graph in Figure 9.1, where all the importations are in protecting
	mode.
	
	We also describe typical parameterized collections of data types such
	as lists and sets, and associations such as maps and arrays. The
	chapter ends introducing the built-in linear Diophantine equation
	solver, defined in the file linear.maude that is also part of the
	Maude distribution.
	
	Other predefined modules, also in the prelude.maude file, are discussed
	later; more specifically, the META-LEVEL module is discussed in Chapter
	14, the LOOP-MODE module in Section 17.1, and the CONFIGURATION module
	in Sections 11.1 and 11.4.
	
	Furthermore, this chapter also describes a predefined module MACHINE-INT
	for machine integers, which is obtained from the module INT of (arbitrary
	size) integers, but is distributed in a separate file machine-int.maude.},
  doi = {10.1007/978-3-540-71999-1},
  owner = {glauber},
  timestamp = {2009.01.14},
  url = {http://www.springerlink.com/content/d04x717n54562031/?p=215e4d3d15eb4b5a84b22ff05307789e&pi=8}
}

@BOOK{MaudeBook,
  title = {All About Maude - A High-Performance Logical Framework},
  publisher = {Springer; Berlin; http://www.springer.de},
  year = {2007},
  author = {Manuel Clavel and Francisco Durán and Steven Eker and Patrick Lincoln
	and Narciso Martí-Oliet and José Meseguer and Carolyn Talcott},
  volume = {4350},
  series = {Lecture Notes in Computer Science},
  month = {July},
  doi = {10.1007/978-3-540-71999-1},
  owner = {glauber},
  timestamp = {2009.01.16},
  url = {http://www.springerlink.com/content/p6h32301712p/?p=77806856e47d4a03847df0c8625abefa&pi=0}
}

@BOOK{CafeOBJReport,
  title = {\textsf{CafeOBJ} Report: The Language, Proof Techniques, and Methodologies
	for Object-Oriented Algebraic Specification},
  publisher = {World Scientific Publishing Co.},
  year = {1998},
  author = {R\u{a}zvan Diaconescu and Kokichi Futatsugi},
  volume = {6},
  pages = {196},
  series = {AMAST Series in Computing},
  address = {Singapure},
  month = {July},
  abstract = {CafeOBJ is an industrial strength modern algebraic specification language,
	a successor of the famous OBJ language, and directly incorporating
	new paradigms such as behavioural concurrent specification and rewriting
	logic. CafeOBJ is the core of an environment supporting the systems
	(mainly software but not only) development process at several levels,
	including prototyping, specification, and formal verification.
	
	
	This book presents the formal definition of the language and its semantics,
	but also methodologies for specification and verification in CafeOBJ,
	with emphasize on concurrent object composition and modularity.
	
	
	The presentation of the CafeOBJ concepts is supported by many examples,
	and an appendix illustrates the power of the language and its methodologies
	by a larger CASE study including specification, testing, and verification.
	
	
	The book might be used both by software engineers interested in algebraic
	methodologies, and by students and researchers in software engineering
	and/or theoretical computing science as a fast introduction to state-of-the-art
	algebraic specification.},
  owner = {glauber},
  timestamp = {2009.01.14}
}

@BOOK{RaiseSpecification,
  title = {The {RAISE} Specification Language},
  publisher = {Prentice-Hall, Inc.},
  year = {1993},
  author = {The RAISE Language Group},
  pages = {397},
  series = {The BCS Practitioners Series},
  month = {January},
  isbn = {0-13-752833-7},
  owner = {glauber},
  timestamp = {2009.01.14}
}

@BOOK{LarchBook,
  title = {Larch: languages and tools for formal specifications},
  publisher = {Springer-Verlag New York, Inc.},
  year = {1993},
  author = {John V. Guttag and James J. Horning},
  pages = {250},
  address = {New York, NY, USA},
  isbn = {0-387-94006-5},
  owner = {glauber},
  timestamp = {2009.01.14},
  url = {http://nms.lcs.mit.edu/Larch/pub/larchBook.ps}
}

@INPROCEEDINGS{ProgramaticaOverview,
  author = {Thomas Hallgren and James Hook and Mark P. Jones and Richard B. Kieburtz},
  title = {An Overview of the Programatica ToolSet},
  booktitle = {High Confidence Software and Systems Conference (HCSS04)},
  year = {2004},
  owner = {glauber},
  timestamp = {2009.01.14},
  url = {http://www.cse.ogi.edu/~hallgren/ Programatica/HCSS04}
}

@MISC{learnHaskell,
  author = {{Haskell Team}},
  title = {{L}earning {H}askell},
  year = {2007},
  owner = {glauber},
  timestamp = {2009.01.11},
  url = {http://www.haskell.org/haskellwiki/Learning\_Haskell}
}

@INPROCEEDINGS{VSE,
  author = {Dieter Hutter and Heiko Mantel and Georg Rock and Werner Stephan
	and Andreas Wolpers and Michael Balser and Wolfgang Reif and Gerhard
	Schellhorn and Kurt Stenzel8},
  title = {{VSE}: Controlling the Complexity in Formal Software Developments},
  booktitle = {Applied Formal Methods - FM-Trends 98 -- International Workshop on
	Current Trends in Applied Formal Method},
  year = {1998},
  editor = {Dieter Hutter and Werner Stephan and Paolo Traverso and Markus Ullmann},
  volume = {1641},
  series = {Lecture Notes in Computer Science},
  pages = {351-358},
  publisher = {Springer; Berlin; http://www.springer.de},
  doi = {10.1007/3-540-48257-1_26},
  owner = {glauber},
  timestamp = {2009.01.14},
  url = {http://www.springerlink.com/content/51rg550q1061q005/}
}

@MISC{IsabelleSite,
  author = {{Isabelle Comunity}},
  title = {{I}sabelle {O}verview},
  year = {2007},
  owner = {glauber},
  timestamp = {2009.01.11},
  url = {http://isabelle.in.tum.de/overview.html}
}

@BOOK{VDM,
  title = {Systematic software development using VDM},
  publisher = {Prentice-Hall, Inc.},
  year = {1990},
  author = {Cliff B. Jones},
  pages = {333},
  edition = {2nd},
  isbn = {0-13-880733-7},
  owner = {glauber},
  timestamp = {2009.01.14}
}

@ARTICLE{SML,
  author = {Stefan Kahrs and Donald Sannella and Andrzej Tarlecki},
  title = {The definition of extended ML: a gentle introduction},
  journal = {Theor. Comput. Sci.},
  year = {1997},
  volume = {173},
  pages = {445--484},
  number = {2},
  doi = {http://dx.doi.org/10.1016/S0304-3975(96)00163-6},
  issn = {0304-3975},
  owner = {glauber},
  publisher = {Elsevier Science Publishers Ltd.},
  timestamp = {2009.01.14},
  url = {http://homepages.inf.ed.ac.uk/dts/eml/gentle-tcs.ps}
}

@ARTICLE{Mossakowski2006,
  author = {Till Mossakowski and Serge Autexier and Dieter Hutter},
  title = {{D}evelopment graphs - {P}roof management for structured specifications},
  journal = {Journal of Logic and Algebraic Programming},
  year = {2006},
  volume = {67},
  pages = {114-145},
  number = {1-2},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  ee = {http://dx.doi.org/10.1016/j.jlap.2005.09.005},
  owner = {glauber},
  timestamp = {2009.01.11},
  url = {http://www.informatik.uni-bremen.de/~till/papers/dgh_journal.ps}
}

@INCOLLECTION{MossakowskiEtAl07b,
  author = {Till Mossakowski and Christian Maeder and Klaus L{\"u}ttich},
  title = {The {H}eterogeneous {T}ool {S}et},
  booktitle = {VERIFY 2007, 4th International Verification Workshop},
  year = {2007},
  editor = {Bernhard Beckert},
  volume = {259},
  series = {CEUR Workshop Proceedings},
  pages = {119-135},
  abstract = {Heterogeneous specification becomes more and more important because
	complex systems are often specified using multiple viewpoints, involving
	multiple formalisms. Moreover, a formal software development process
	may lead to a change of formalism during the development. However,
	current research in integrated formal methods only deals with ad-hoc
	integrations of different formalisms.
	
	The heterogeneous tool set (Hets) is a parsing, static analysis and
	proof management tool combining various such tools for individual
	specification languages, thus providing a tool for heterogeneous
	multi-logic specification. Hets is based on a graph of logics and
	languages (formalized as so-called institutions), their tools, and
	their translations. This provides a clean semantics of heterogeneous
	specifications, as well as a corresponding proof calculus. For proof
	management, the calculus of development graphs (known from other
	large-scale proof management systems) has been adapted to heterogeneous
	specification. Development graphs provide an overview of the (heterogeneous)
	specification module hierarchy and the current proof state, and thus
	may be used for monitoring the overall correctness of a heterogeneous
	development.
	
	We illustrate the approach with a sample heterogeneous proof proving
	the correctness of the composition table of a qualitative spatial
	calculus. The proof involves two different provers and logics: an
	automated first-order prover solving the vast majority of the goals,
	and an interactive higher-order prover used to prove a few bridge
	lemmas.},
  keywords = {heterogeneous theorem proving tools logic proofs},
  owner = {glauber},
  pdfurl = {http://sunsite.informatik.rwth-aachen.de/Publications/CEUR-WS/Vol-259/paper11.pdf},
  status = {Reviewed},
  timestamp = {2009.01.11},
  url = {http://CEUR-WS.org/Vol-259}
}

@BOOK{Nipkow-Paulson-Wenzel:2002,
  title = {{I}sabelle/{HOL} --- A Proof Assistant for Higher-Order Logic},
  publisher = {Springer},
  year = {2002},
  author = {Tobias Nipkow and Lawrence C. Paulson and Markus Wenzel},
  volume = {2283},
  series = {LNCS},
  owner = {glauber},
  timestamp = {2009.01.11}
}

@PHDTHESIS{Schroder2006,
  author = {Lutz Schr{\"o}der},
  title = {Higher Order and Reactive Algebraic Specification and Development},
  year = {2006},
  month = {Feb},
  owner = {glauber},
  timestamp = {2009.01.11},
  url = {http://www.informatik.uni-bremen.de/~lschrode/papers/Summary.ps}
}

@INPROCEEDINGS{SchroderMossakowski02,
  author = {Lutz Schr{\"o}der and Till Mossakowski},
  title = {{HasCASL}: Towards Integrated Specification and Development of Functional
	Programs},
  booktitle = {Algebraic Methodology And Software Technology (AMAST 2002)},
  year = {2002},
  editor = {H{\'e}l{\`e}ne Kirchner and Christophe Ringeissen},
  volume = {2422},
  series = {Lecture Notes in Computer Science},
  pages = {153--180},
  month = {September},
  publisher = {Springer; Berlin; http://www.springer.de},
  abstract = {The development of programs in modern functional languages such as
	Haskell calls for a wide-spectrum specification formalism that supports
	the type system of such languages, in particular higher order types,
	type constructors, and parametric polymorphism, and that contains
	a functional language as an executable subset in order to facilitate
	rapid prototyping. We lay out the design of HasCASL, a higher order
	extension of the algebraic specification language CASL that is geared
	towards precisely this purpose. Its semantics is tuned to allow program
	development by specification refinement, while at the same time staying
	close to the set-theoretic semantics of first order CASL. The number
	of primitive concepts in the logic has been kept as small as possible;
	we demonstrate how various extensions to the logic, in particular
	general recursion, can be formulated within the language itself.},
  doi = {10.1007/3-540-45719-4_8},
  keywords = {CASL HasCASL general recursion functional programming partial lambda-calculus},
  owner = {glauber},
  psurl = {http://www.informatik.uni-bremen.de/~lschrode/hascasl/recursion.ps},
  status = {Reviewed},
  timestamp = {2009.01.11},
  url = {http://www.springerlink.com/content/r0kvr9r2aek7kdyw/?p=61b6f018bc104444a13ab5153afdcba0&pi=7}
}

@UNPUBLISHED{SchroderEtAl03,
  author = {Lutz Schr{\"o}der and Till Mossakowski and Christian Maeder},
  title = {{HasCASL} - Integrated functional specification and programming.
	(Language Summary)},
  month = {March},
  year = {2004},
  abstract = {The development of programs in modern functional languages such as
	Haskell calls for a wide-spectrum specification formalism that supports
	the type system of such languages, in particular higher order types,
	type constructors, and polymorphism, and that contains a functional
	language as an executable subset in order to facilitate rapid prototyping.
	We lay out the design of HasCASL, a higher order extension of CASL
	that is geared towards precisely this purpose. Its semantics is tuned
	to allow program development by specification refinement, while at
	the same time staying close to the set-theoretic semantics of first
	order CASL. The number of primitive concepts in the logic has been
	kept as small as possible; advanced concepts, in particular general
	recursion, can be formulated within the language itself. This document
	provides a detailed definition of the HasCASL syntax and an informal
	description of the semantics, building on the existing CASL Summary.},
  owner = {glauber},
  pdfurl = {http://www.informatik.uni-bremen.de/agbkb/forschung/formal_methods/CoFI/HasCASL/hascasl_summary.pdf},
  psurl = {http://www.informatik.uni-bremen.de/agbkb/forschung/formal_methods/CoFI/HasCASL/hascasl_summary.ps},
  status = {Other},
  timestamp = {2009.01.11},
  url = {http://www.informatik.uni-bremen.de/agbkb/forschung/formal_methods/CoFI/HasCASL/hascasl_summary.pdf}
}

@UNPUBLISHED{HasCASLOverview,
  author = {Schröder, Lutz and Mossakowski, Till},
  title = {{HasCASL} - Integrated Higher-Order Specification and Program Development},
  owner = {glauber},
  timestamp = {2009.01.05},
  url = {http://www.informatik.uni-bremen.de/agbkb/forschung/formal_methods/CoFI/HasCASL/hascasl_overview.pdf}
}

@BOOK{ZNotation,
  title = {The Z Notation: a Reference Manual},
  publisher = {Prentice-Hall, Inc.},
  year = {1992},
  author = {J. M. Spivey},
  pages = {158},
  edition = {2nd},
  month = {June},
  isbn = {0-13-983768-X},
  owner = {glauber},
  timestamp = {2009.01.14},
  url = {http://spivey.oriel.ox.ac.uk/mike/zrm/}
}

@ELECTRONIC{CoqManual,
  author = {{The Coq Development Team}},
  year = {2006},
  title = {The Coq Proof Assistant – Reference Manual, v8.1.},
  organization = {INRIA},
  url = {http://coq.inria.fr/doc-eng.html},
  owner = {glauber},
  timestamp = {2009.01.14}
}

@BOOK{Thompson1999,
  title = {{H}askell: {T}he {C}raft of {F}unctional {P}rogramming (2nd Edition)},
  publisher = {{Addison Wesley}},
  year = {1999},
  author = {Thompson, Simon },
  month = {March},
  citeulike-article-id = {167577},
  howpublished = {Paperback},
  isbn = {0201342758},
  keywords = {functional-programming, haskell},
  owner = {glauber},
  posted-at = {2005-08-09 12:11:47},
  priority = {0},
  timestamp = {2009.01.11},
  url = {http://www.amazon.ca/exec/obidos/redirect?tag=citeulike09-20\&amp;path=ASIN/0201342758}
}

@comment{jabref-meta: selector_journal:}

@comment{jabref-meta: selector_author:}

@comment{jabref-meta: selector_keywords:}

@comment{jabref-meta: selector_publisher:}

